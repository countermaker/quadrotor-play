<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Quad FC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Quad FC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat Sep 24 16:23:18 2016
<BR><P>
<H3>Maximum Stack Usage =        904 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AttitudeTask &rArr; SensorUpdate_Init &rArr; SensorUpdate_GetGyroAccRaw &rArr; MPU6000_Read &rArr; MPU6000_BrustRead &rArr; BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ec]">CPU_IntDis</a>
 <LI><a href="#[20b]">CPU_IntEn</a>
 <LI><a href="#[c5]">CPU_SR_Save</a>
 <LI><a href="#[c6]">CPU_SR_Restore</a>
 <LI><a href="#[20c]">CPU_WaitForInt</a>
 <LI><a href="#[20d]">CPU_WaitForExcept</a>
 <LI><a href="#[1cb]">CPU_CntLeadZeros</a>
 <LI><a href="#[20e]">CPU_CntTrailZeros</a>
 <LI><a href="#[20f]">CPU_RevBits</a>
 <LI><a href="#[1b4]">OS_CPU_FP_Reg_Push</a>
 <LI><a href="#[1b5]">OS_CPU_FP_Reg_Pop</a>
 <LI><a href="#[19e]">OSStartHighRdy</a>
 <LI><a href="#[195]">OSCtxSw</a>
 <LI><a href="#[187]">OSIntCtxSw</a>
 <LI><a href="#[8]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">App_NMI_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">App_NMI_ISR</a><BR>
 <LI><a href="#[3]">App_Fault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">App_Fault_ISR</a><BR>
 <LI><a href="#[4]">App_MemFault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">App_MemFault_ISR</a><BR>
 <LI><a href="#[5]">App_BusFault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">App_BusFault_ISR</a><BR>
 <LI><a href="#[6]">App_UsageFault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">App_UsageFault_ISR</a><BR>
 <LI><a href="#[7]">App_Spurious_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">App_Spurious_ISR</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[68]">AccCalibrateTask</a> from acccalibratetask.o(i.AccCalibrateTask) referenced from acccalibratetask.o(i.AccCalibrateTaskCreate)
 <LI><a href="#[89]">AppTaskStart</a> from app.o(i.AppTaskStart) referenced from app.o(i.main)
 <LI><a href="#[5]">App_BusFault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[3]">App_Fault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[4]">App_MemFault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[2]">App_NMI_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[6c]">App_OS_IdleTaskHook</a> from os_app_hooks.o(i.App_OS_IdleTaskHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[6d]">App_OS_StatTaskHook</a> from os_app_hooks.o(i.App_OS_StatTaskHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[69]">App_OS_TaskCreateHook</a> from os_app_hooks.o(i.App_OS_TaskCreateHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[6a]">App_OS_TaskDelHook</a> from os_app_hooks.o(i.App_OS_TaskDelHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[6b]">App_OS_TaskReturnHook</a> from os_app_hooks.o(i.App_OS_TaskReturnHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[6e]">App_OS_TaskSwHook</a> from os_app_hooks.o(i.App_OS_TaskSwHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[6f]">App_OS_TimeTickHook</a> from os_app_hooks.o(i.App_OS_TimeTickHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[7]">App_Spurious_ISR</a> from cstartup.o(.text) referenced 7 times from cstartup.o(RESET)
 <LI><a href="#[6]">App_UsageFault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[70]">AttitudeTask</a> from attitudetask.o(i.AttitudeTask) referenced from attitudetask.o(i.AttitudeTaskCreate)
 <LI><a href="#[7c]">BSP_EXTI0_ISR_Handler</a> from mpu6000.o(i.BSP_EXTI0_ISR_Handler) referenced from mpu6000.o(i.MPU6000_Init)
 <LI><a href="#[72]">BSP_I2C3_ER_ISR</a> from bsp_iic3.o(i.BSP_I2C3_ER_ISR) referenced from bsp_iic3.o(i.BSP_I2C3_Init)
 <LI><a href="#[71]">BSP_I2C3_EV_ISR</a> from bsp_iic3.o(i.BSP_I2C3_EV_ISR) referenced from bsp_iic3.o(i.BSP_I2C3_Init)
 <LI><a href="#[1c]">BSP_IntHandlerADC</a> from bsp_int.o(i.BSP_IntHandlerADC) referenced from cstartup.o(RESET)
 <LI><a href="#[1e]">BSP_IntHandlerCAN1_RX0</a> from bsp_int.o(i.BSP_IntHandlerCAN1_RX0) referenced from cstartup.o(RESET)
 <LI><a href="#[1f]">BSP_IntHandlerCAN1_RX1</a> from bsp_int.o(i.BSP_IntHandlerCAN1_RX1) referenced from cstartup.o(RESET)
 <LI><a href="#[20]">BSP_IntHandlerCAN1_SCE</a> from bsp_int.o(i.BSP_IntHandlerCAN1_SCE) referenced from cstartup.o(RESET)
 <LI><a href="#[1d]">BSP_IntHandlerCAN1_TX</a> from bsp_int.o(i.BSP_IntHandlerCAN1_TX) referenced from cstartup.o(RESET)
 <LI><a href="#[4a]">BSP_IntHandlerCAN2_RX0</a> from bsp_int.o(i.BSP_IntHandlerCAN2_RX0) referenced from cstartup.o(RESET)
 <LI><a href="#[4b]">BSP_IntHandlerCAN2_RX1</a> from bsp_int.o(i.BSP_IntHandlerCAN2_RX1) referenced from cstartup.o(RESET)
 <LI><a href="#[4c]">BSP_IntHandlerCAN2_SCE</a> from bsp_int.o(i.BSP_IntHandlerCAN2_SCE) referenced from cstartup.o(RESET)
 <LI><a href="#[49]">BSP_IntHandlerCAN2_TX</a> from bsp_int.o(i.BSP_IntHandlerCAN2_TX) referenced from cstartup.o(RESET)
 <LI><a href="#[59]">BSP_IntHandlerCRYP</a> from bsp_int.o(i.BSP_IntHandlerCRYP) referenced from cstartup.o(RESET)
 <LI><a href="#[58]">BSP_IntHandlerDCMI</a> from bsp_int.o(i.BSP_IntHandlerDCMI) referenced from cstartup.o(RESET)
 <LI><a href="#[15]">BSP_IntHandlerDMA1_CH0</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH0) referenced from cstartup.o(RESET)
 <LI><a href="#[16]">BSP_IntHandlerDMA1_CH1</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH1) referenced from cstartup.o(RESET)
 <LI><a href="#[17]">BSP_IntHandlerDMA1_CH2</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH2) referenced from cstartup.o(RESET)
 <LI><a href="#[18]">BSP_IntHandlerDMA1_CH3</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH3) referenced from cstartup.o(RESET)
 <LI><a href="#[19]">BSP_IntHandlerDMA1_CH4</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH4) referenced from cstartup.o(RESET)
 <LI><a href="#[1a]">BSP_IntHandlerDMA1_CH5</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH5) referenced from cstartup.o(RESET)
 <LI><a href="#[1b]">BSP_IntHandlerDMA1_CH6</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH6) referenced from cstartup.o(RESET)
 <LI><a href="#[39]">BSP_IntHandlerDMA1_STREAM7</a> from bsp_int.o(i.BSP_IntHandlerDMA1_STREAM7) referenced from cstartup.o(RESET)
 <LI><a href="#[64]">BSP_IntHandlerDMA2D</a> from bsp_int.o(i.BSP_IntHandlerDMA2D) referenced from cstartup.o(RESET)
 <LI><a href="#[42]">BSP_IntHandlerDMA2_CH0</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH0) referenced from cstartup.o(RESET)
 <LI><a href="#[43]">BSP_IntHandlerDMA2_CH1</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH1) referenced from cstartup.o(RESET)
 <LI><a href="#[44]">BSP_IntHandlerDMA2_CH2</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH2) referenced from cstartup.o(RESET)
 <LI><a href="#[45]">BSP_IntHandlerDMA2_CH3</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH3) referenced from cstartup.o(RESET)
 <LI><a href="#[46]">BSP_IntHandlerDMA2_CH4</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH4) referenced from cstartup.o(RESET)
 <LI><a href="#[4e]">BSP_IntHandlerDMA2_CH5</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH5) referenced from cstartup.o(RESET)
 <LI><a href="#[4f]">BSP_IntHandlerDMA2_CH6</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH6) referenced from cstartup.o(RESET)
 <LI><a href="#[50]">BSP_IntHandlerDMA2_CH7</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH7) referenced from cstartup.o(RESET)
 <LI><a href="#[73]">BSP_IntHandlerDummy</a> from bsp_int.o(i.BSP_IntHandlerDummy) referenced from bsp_int.o(i.BSP_IntInit)
 <LI><a href="#[47]">BSP_IntHandlerETH</a> from bsp_int.o(i.BSP_IntHandlerETH) referenced from cstartup.o(RESET)
 <LI><a href="#[48]">BSP_IntHandlerETHWakeup</a> from bsp_int.o(i.BSP_IntHandlerETHWakeup) referenced from cstartup.o(RESET)
 <LI><a href="#[10]">BSP_IntHandlerEXTI0</a> from bsp_int.o(i.BSP_IntHandlerEXTI0) referenced from cstartup.o(RESET)
 <LI><a href="#[11]">BSP_IntHandlerEXTI1</a> from bsp_int.o(i.BSP_IntHandlerEXTI1) referenced from cstartup.o(RESET)
 <LI><a href="#[32]">BSP_IntHandlerEXTI15_10</a> from bsp_int.o(i.BSP_IntHandlerEXTI15_10) referenced from cstartup.o(RESET)
 <LI><a href="#[12]">BSP_IntHandlerEXTI2</a> from bsp_int.o(i.BSP_IntHandlerEXTI2) referenced from cstartup.o(RESET)
 <LI><a href="#[13]">BSP_IntHandlerEXTI3</a> from bsp_int.o(i.BSP_IntHandlerEXTI3) referenced from cstartup.o(RESET)
 <LI><a href="#[14]">BSP_IntHandlerEXTI4</a> from bsp_int.o(i.BSP_IntHandlerEXTI4) referenced from cstartup.o(RESET)
 <LI><a href="#[21]">BSP_IntHandlerEXTI9_5</a> from bsp_int.o(i.BSP_IntHandlerEXTI9_5) referenced from cstartup.o(RESET)
 <LI><a href="#[e]">BSP_IntHandlerFLASH</a> from bsp_int.o(i.BSP_IntHandlerFLASH) referenced from cstartup.o(RESET)
 <LI><a href="#[5b]">BSP_IntHandlerFPU</a> from bsp_int.o(i.BSP_IntHandlerFPU) referenced from cstartup.o(RESET)
 <LI><a href="#[3a]">BSP_IntHandlerFSMC</a> from bsp_int.o(i.BSP_IntHandlerFSMC) referenced from cstartup.o(RESET)
 <LI><a href="#[5a]">BSP_IntHandlerHASH_RNG</a> from bsp_int.o(i.BSP_IntHandlerHASH_RNG) referenced from cstartup.o(RESET)
 <LI><a href="#[2a]">BSP_IntHandlerI2C1_ER</a> from bsp_int.o(i.BSP_IntHandlerI2C1_ER) referenced from cstartup.o(RESET)
 <LI><a href="#[29]">BSP_IntHandlerI2C1_EV</a> from bsp_int.o(i.BSP_IntHandlerI2C1_EV) referenced from cstartup.o(RESET)
 <LI><a href="#[2c]">BSP_IntHandlerI2C2_ER</a> from bsp_int.o(i.BSP_IntHandlerI2C2_ER) referenced from cstartup.o(RESET)
 <LI><a href="#[2b]">BSP_IntHandlerI2C2_EV</a> from bsp_int.o(i.BSP_IntHandlerI2C2_EV) referenced from cstartup.o(RESET)
 <LI><a href="#[53]">BSP_IntHandlerI2C3_ER</a> from bsp_int.o(i.BSP_IntHandlerI2C3_ER) referenced from cstartup.o(RESET)
 <LI><a href="#[52]">BSP_IntHandlerI2C3_EV</a> from bsp_int.o(i.BSP_IntHandlerI2C3_EV) referenced from cstartup.o(RESET)
 <LI><a href="#[62]">BSP_IntHandlerLTDC</a> from bsp_int.o(i.BSP_IntHandlerLTDC) referenced from cstartup.o(RESET)
 <LI><a href="#[63]">BSP_IntHandlerLTDC_ER</a> from bsp_int.o(i.BSP_IntHandlerLTDC_ER) referenced from cstartup.o(RESET)
 <LI><a href="#[4d]">BSP_IntHandlerOTG_FS</a> from bsp_int.o(i.BSP_IntHandlerOTG_FS) referenced from cstartup.o(RESET)
 <LI><a href="#[34]">BSP_IntHandlerOTG_FS_WKUP</a> from bsp_int.o(i.BSP_IntHandlerOTG_FS_WKUP) referenced from cstartup.o(RESET)
 <LI><a href="#[57]">BSP_IntHandlerOTG_HS</a> from bsp_int.o(i.BSP_IntHandlerOTG_HS) referenced from cstartup.o(RESET)
 <LI><a href="#[55]">BSP_IntHandlerOTG_HS_EP1_IN</a> from bsp_int.o(i.BSP_IntHandlerOTG_HS_EP1_IN) referenced from cstartup.o(RESET)
 <LI><a href="#[54]">BSP_IntHandlerOTG_HS_EP1_OUT</a> from bsp_int.o(i.BSP_IntHandlerOTG_HS_EP1_OUT) referenced from cstartup.o(RESET)
 <LI><a href="#[56]">BSP_IntHandlerOTG_HS_WKUP</a> from bsp_int.o(i.BSP_IntHandlerOTG_HS_WKUP) referenced from cstartup.o(RESET)
 <LI><a href="#[b]">BSP_IntHandlerPVD</a> from bsp_int.o(i.BSP_IntHandlerPVD) referenced from cstartup.o(RESET)
 <LI><a href="#[f]">BSP_IntHandlerRCC</a> from bsp_int.o(i.BSP_IntHandlerRCC) referenced from cstartup.o(RESET)
 <LI><a href="#[33]">BSP_IntHandlerRTCAlarm</a> from bsp_int.o(i.BSP_IntHandlerRTCAlarm) referenced from cstartup.o(RESET)
 <LI><a href="#[d]">BSP_IntHandlerRTC_WKUP</a> from bsp_int.o(i.BSP_IntHandlerRTC_WKUP) referenced from cstartup.o(RESET)
 <LI><a href="#[61]">BSP_IntHandlerSAI1</a> from bsp_int.o(i.BSP_IntHandlerSAI1) referenced from cstartup.o(RESET)
 <LI><a href="#[3b]">BSP_IntHandlerSDIO</a> from bsp_int.o(i.BSP_IntHandlerSDIO) referenced from cstartup.o(RESET)
 <LI><a href="#[2d]">BSP_IntHandlerSPI1</a> from bsp_int.o(i.BSP_IntHandlerSPI1) referenced from cstartup.o(RESET)
 <LI><a href="#[2e]">BSP_IntHandlerSPI2</a> from bsp_int.o(i.BSP_IntHandlerSPI2) referenced from cstartup.o(RESET)
 <LI><a href="#[3d]">BSP_IntHandlerSPI3</a> from bsp_int.o(i.BSP_IntHandlerSPI3) referenced from cstartup.o(RESET)
 <LI><a href="#[5e]">BSP_IntHandlerSPI4</a> from bsp_int.o(i.BSP_IntHandlerSPI4) referenced from cstartup.o(RESET)
 <LI><a href="#[5f]">BSP_IntHandlerSPI5</a> from bsp_int.o(i.BSP_IntHandlerSPI5) referenced from cstartup.o(RESET)
 <LI><a href="#[60]">BSP_IntHandlerSPI6</a> from bsp_int.o(i.BSP_IntHandlerSPI6) referenced from cstartup.o(RESET)
 <LI><a href="#[c]">BSP_IntHandlerTAMP_STAMP</a> from bsp_int.o(i.BSP_IntHandlerTAMP_STAMP) referenced from cstartup.o(RESET)
 <LI><a href="#[22]">BSP_IntHandlerTIM1_BRK_TIM9</a> from bsp_int.o(i.BSP_IntHandlerTIM1_BRK_TIM9) referenced from cstartup.o(RESET)
 <LI><a href="#[25]">BSP_IntHandlerTIM1_CC</a> from bsp_int.o(i.BSP_IntHandlerTIM1_CC) referenced from cstartup.o(RESET)
 <LI><a href="#[24]">BSP_IntHandlerTIM1_TRG_COM_TIM11</a> from bsp_int.o(i.BSP_IntHandlerTIM1_TRG_COM_TIM11) referenced from cstartup.o(RESET)
 <LI><a href="#[23]">BSP_IntHandlerTIM1_UP_TIM10</a> from bsp_int.o(i.BSP_IntHandlerTIM1_UP_TIM10) referenced from cstartup.o(RESET)
 <LI><a href="#[26]">BSP_IntHandlerTIM2</a> from bsp_int.o(i.BSP_IntHandlerTIM2) referenced from cstartup.o(RESET)
 <LI><a href="#[27]">BSP_IntHandlerTIM3</a> from bsp_int.o(i.BSP_IntHandlerTIM3) referenced from cstartup.o(RESET)
 <LI><a href="#[28]">BSP_IntHandlerTIM4</a> from bsp_int.o(i.BSP_IntHandlerTIM4) referenced from cstartup.o(RESET)
 <LI><a href="#[3c]">BSP_IntHandlerTIM5</a> from bsp_int.o(i.BSP_IntHandlerTIM5) referenced from cstartup.o(RESET)
 <LI><a href="#[40]">BSP_IntHandlerTIM6_DAC</a> from bsp_int.o(i.BSP_IntHandlerTIM6_DAC) referenced from cstartup.o(RESET)
 <LI><a href="#[41]">BSP_IntHandlerTIM7</a> from bsp_int.o(i.BSP_IntHandlerTIM7) referenced from cstartup.o(RESET)
 <LI><a href="#[35]">BSP_IntHandlerTIM8_BRK_TIM12</a> from bsp_int.o(i.BSP_IntHandlerTIM8_BRK_TIM12) referenced from cstartup.o(RESET)
 <LI><a href="#[38]">BSP_IntHandlerTIM8_CC</a> from bsp_int.o(i.BSP_IntHandlerTIM8_CC) referenced from cstartup.o(RESET)
 <LI><a href="#[37]">BSP_IntHandlerTIM8_TRG_COM_TIM14</a> from bsp_int.o(i.BSP_IntHandlerTIM8_TRG_COM_TIM14) referenced from cstartup.o(RESET)
 <LI><a href="#[36]">BSP_IntHandlerTIM8_UP_TIM13</a> from bsp_int.o(i.BSP_IntHandlerTIM8_UP_TIM13) referenced from cstartup.o(RESET)
 <LI><a href="#[5c]">BSP_IntHandlerUART7</a> from bsp_int.o(i.BSP_IntHandlerUART7) referenced from cstartup.o(RESET)
 <LI><a href="#[5d]">BSP_IntHandlerUART8</a> from bsp_int.o(i.BSP_IntHandlerUART8) referenced from cstartup.o(RESET)
 <LI><a href="#[2f]">BSP_IntHandlerUSART1</a> from bsp_int.o(i.BSP_IntHandlerUSART1) referenced from cstartup.o(RESET)
 <LI><a href="#[30]">BSP_IntHandlerUSART2</a> from bsp_int.o(i.BSP_IntHandlerUSART2) referenced from cstartup.o(RESET)
 <LI><a href="#[31]">BSP_IntHandlerUSART3</a> from bsp_int.o(i.BSP_IntHandlerUSART3) referenced from cstartup.o(RESET)
 <LI><a href="#[3e]">BSP_IntHandlerUSART4</a> from bsp_int.o(i.BSP_IntHandlerUSART4) referenced from cstartup.o(RESET)
 <LI><a href="#[3f]">BSP_IntHandlerUSART5</a> from bsp_int.o(i.BSP_IntHandlerUSART5) referenced from cstartup.o(RESET)
 <LI><a href="#[51]">BSP_IntHandlerUSART6</a> from bsp_int.o(i.BSP_IntHandlerUSART6) referenced from cstartup.o(RESET)
 <LI><a href="#[a]">BSP_IntHandlerWWDG</a> from bsp_int.o(i.BSP_IntHandlerWWDG) referenced from cstartup.o(RESET)
 <LI><a href="#[77]">BSP_Ser_ISR_Handler</a> from bsp_ser.o(i.BSP_Ser_ISR_Handler) referenced from bsp_ser.o(i.BSP_Ser_Init)
 <LI><a href="#[78]">BSP_USART2_ISR</a> from bsp_usart2.o(i.BSP_USART2_ISR) referenced from bsp_usart2.o(i.BSP_USART2_Init)
 <LI><a href="#[79]">CommTask</a> from commtask.o(i.CommTask) referenced from commtask.o(i.CommTaskCreate)
 <LI><a href="#[7a]">ControlTask</a> from controltask.o(i.ControlTask) referenced from controltask.o(i.ControlTaskCreate)
 <LI><a href="#[7b]">ESCCalibrateTask</a> from esccalibratetask.o(i.ESCCalibrateTask) referenced from esccalibratetask.o(i.ESCCalibrateTaskCreate)
 <LI><a href="#[7d]">NavigateTask</a> from navigatetask.o(i.NavigateTask) referenced from navigatetask.o(i.NavigateTaskCreate)
 <LI><a href="#[8]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(CODE) referenced from cstartup.o(RESET)
 <LI><a href="#[9]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(i.OS_CPU_SysTickHandler) referenced from cstartup.o(RESET)
 <LI><a href="#[7f]">OS_IdleTask</a> from os_core.o(i.OS_IdleTask) referenced from os_core.o(i.OS_IdleTaskInit)
 <LI><a href="#[80]">OS_IntQTask</a> from os_int.o(i.OS_IntQTask) referenced from os_int.o(i.OS_IntQTaskInit)
 <LI><a href="#[81]">OS_StatTask</a> from os_stat.o(i.OS_StatTask) referenced from os_stat.o(i.OS_StatTaskInit)
 <LI><a href="#[7e]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[82]">OS_TickTask</a> from os_tick.o(i.OS_TickTask) referenced from os_tick.o(i.OS_TickTaskInit)
 <LI><a href="#[83]">OS_TmrTask</a> from os_tmr.o(i.OS_TmrTask) referenced from os_tmr.o(i.OS_TmrInit)
 <LI><a href="#[84]">PosControlTask</a> from poscontroltask.o(i.PosControlTask) referenced from poscontroltask.o(i.PosControlTaskCreate)
 <LI><a href="#[85]">PrintfTask</a> from serprinttask.o(i.PrintfTask) referenced from serprinttask.o(i.PrintfTaskCreate)
 <LI><a href="#[86]">RCTask</a> from rctask.o(i.RCTask) referenced from rctask.o(i.RCTaskCreate)
 <LI><a href="#[1]">Reset_Handler</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[87]">StateCheckTask</a> from statechecktask.o(i.StateCheckTask) referenced from statechecktask.o(i.StateCheckTaskCreate)
 <LI><a href="#[66]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from cstartup.o(.text)
 <LI><a href="#[74]">TIM1_ISR_Handler</a> from bsp_pwm_in.o(i.TIM1_ISR_Handler) referenced from bsp_pwm_in.o(i.BSP_PWM_IN_InitTimer)
 <LI><a href="#[75]">TIM2_ISR_Handler</a> from bsp_pwm_in.o(i.TIM2_ISR_Handler) referenced from bsp_pwm_in.o(i.BSP_PWM_IN_InitTimer)
 <LI><a href="#[76]">TIM8_ISR_Handler</a> from bsp_pwm_in.o(i.TIM8_ISR_Handler) referenced from bsp_pwm_in.o(i.BSP_PWM_IN_InitTimer)
 <LI><a href="#[67]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from cstartup.o(.text)
 <LI><a href="#[88]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[65]">main</a> from app.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(.text)
</UL>
<P><STRONG><a name="[205]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[206]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[207]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[208]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[209]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[20a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>App_NMI_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NMI_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NMI_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>App_Fault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>App_MemFault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MemFault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MemFault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>App_BusFault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BusFault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BusFault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>App_UsageFault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UsageFault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UsageFault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>App_Spurious_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Spurious_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Spurious_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>App_Reserved_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Reserved_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Reserved_ISR
</UL>

<P><STRONG><a name="[ec]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDisAll
</UL>

<P><STRONG><a name="[20b]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OS_SetAllHooks
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPrioSet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcEn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcDis
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntPrioSet
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCreate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_RandSetSeed
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>

<P><STRONG><a name="[c6]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OS_SetAllHooks
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPrioSet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcEn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcDis
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntPrioSet
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCreate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_RandSetSeed
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>

<P><STRONG><a name="[20c]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>

<P><STRONG><a name="[20e]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTask
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_UpdateAlignRotMat
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_UpdateAlignRotMat
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPWM
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_UpdateAlignRotMat
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_dt
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTask
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPWM
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_GetTarget
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTask
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_UpdateAlignRotMat
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTask
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTask
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_GetTarget
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTask
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPWM
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_UpdateAlignRotMat
</UL>

<P><STRONG><a name="[212]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[213]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[214]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[215]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[99]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>

<P><STRONG><a name="[93]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[92]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9f]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[217]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>OS_CPU_FP_Reg_Push</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[1b5]"></a>OS_CPU_FP_Reg_Pop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[19e]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[195]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[187]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_CPU_PendSVHandler &rArr; OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>AccCalibrateTask</STRONG> (Thumb, 1516 bytes, Stack size 112 bytes, acccalibratetask.o(i.AccCalibrateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = AccCalibrateTask &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_UpdateAlignRotMat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_SetAccOffset
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_SetAccGain
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acccalibratetask.o(i.AccCalibrateTaskCreate)
</UL>
<P><STRONG><a name="[ab]"></a>AccCalibrateTaskCreate</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, acccalibratetask.o(i.AccCalibrateTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = AccCalibrateTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[6c]"></a>App_OS_IdleTaskHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_IdleTaskHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[b9]"></a>App_OS_SetAllHooks</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, os_app_hooks.o(i.App_OS_SetAllHooks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = App_OS_SetAllHooks
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[6d]"></a>App_OS_StatTaskHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_StatTaskHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[69]"></a>App_OS_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_TaskCreateHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[6a]"></a>App_OS_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_TaskDelHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[6b]"></a>App_OS_TaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_TaskReturnHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[6e]"></a>App_OS_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_TaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[6f]"></a>App_OS_TimeTickHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_app_hooks.o(i.App_OS_TimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = App_OS_TimeTickHook &rArr; CPAL_I2C_TIMEOUT_Manager &rArr; CPAL_TIMEOUT_UserCallback &rArr; CPAL_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_TIMEOUT_Manager
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[70]"></a>AttitudeTask</STRONG> (Thumb, 2320 bytes, Stack size 280 bytes, attitudetask.o(i.AttitudeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = AttitudeTask &rArr; SensorUpdate_Init &rArr; SensorUpdate_GetGyroAccRaw &rArr; MPU6000_Read &rArr; MPU6000_BrustRead &rArr; BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectScale
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectCopy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectAdd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_GetGyroAccRaw
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EulerRoateVect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPF
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_f
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_dt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitudetask.o(i.AttitudeTaskCreate)
</UL>
<P><STRONG><a name="[b5]"></a>AttitudeTaskCreate</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, attitudetask.o(i.AttitudeTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = AttitudeTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[d7]"></a>BSP_CPU_ClkFreq</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, bsp.o(i.BSP_CPU_ClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tick_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[7c]"></a>BSP_EXTI0_ISR_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mpu6000.o(i.BSP_EXTI0_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BSP_EXTI0_ISR_Handler &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6000.o(i.MPU6000_Init)
</UL>
<P><STRONG><a name="[72]"></a>BSP_I2C3_ER_ISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_iic3.o(i.BSP_I2C3_ER_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = BSP_I2C3_ER_ISR &rArr; I2C3_ER_IRQHandler &rArr; CPAL_I2C_ER_IRQHandler &rArr; CPAL_I2C_TXTC_UserCallback &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_iic3.o(i.BSP_I2C3_Init)
</UL>
<P><STRONG><a name="[71]"></a>BSP_I2C3_EV_ISR</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_iic3.o(i.BSP_I2C3_EV_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = BSP_I2C3_EV_ISR &rArr; I2C3_EV_IRQHandler &rArr; CPAL_I2C_EV_IRQHandler &rArr; I2C_MASTER_TXE_Handle &rArr; CPAL_I2C_TXTC_UserCallback &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_iic3.o(i.BSP_I2C3_Init)
</UL>
<P><STRONG><a name="[c3]"></a>BSP_I2C3_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, bsp_iic3.o(i.BSP_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = BSP_I2C3_Init &rArr; CPAL_I2C_IsDeviceReady &rArr; CPAL_I2C_Timeout &rArr; CPAL_TIMEOUT_UserCallback &rArr; CPAL_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_StructInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_IsDeviceReady
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexCreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[bb]"></a>BSP_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = BSP_Init &rArr; BSP_SPI1_Init &rArr; BSP_OS_SemCreate &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriphEn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[da]"></a>BSP_IntDis</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntDis &rArr; CPU_IntSrcDis
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcDis
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI0_ISR_Handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
</UL>

<P><STRONG><a name="[eb]"></a>BSP_IntDisAll</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntDisAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = BSP_IntDisAll
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>BSP_IntEn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntEn &rArr; CPU_IntSrcEn
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcEn
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C3_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Read
</UL>

<P><STRONG><a name="[1c]"></a>BSP_IntHandlerADC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerADC &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BSP_IntHandlerCAN1_RX0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCAN1_RX0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN1_RX0 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BSP_IntHandlerCAN1_RX1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCAN1_RX1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN1_RX1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>BSP_IntHandlerCAN1_SCE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCAN1_SCE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN1_SCE &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>BSP_IntHandlerCAN1_TX</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCAN1_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN1_TX &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>BSP_IntHandlerCAN2_RX0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCAN2_RX0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN2_RX0 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>BSP_IntHandlerCAN2_RX1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCAN2_RX1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN2_RX1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>BSP_IntHandlerCAN2_SCE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCAN2_SCE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN2_SCE &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>BSP_IntHandlerCAN2_TX</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCAN2_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN2_TX &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>BSP_IntHandlerCRYP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCRYP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCRYP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>BSP_IntHandlerDCMI</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDCMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDCMI &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BSP_IntHandlerDMA1_CH0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH0 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BSP_IntHandlerDMA1_CH1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BSP_IntHandlerDMA1_CH2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BSP_IntHandlerDMA1_CH3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>BSP_IntHandlerDMA1_CH4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BSP_IntHandlerDMA1_CH5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>BSP_IntHandlerDMA1_CH6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH6))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH6 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>BSP_IntHandlerDMA1_STREAM7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_STREAM7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_STREAM7 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>BSP_IntHandlerDMA2D</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2D &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>BSP_IntHandlerDMA2_CH0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH0 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>BSP_IntHandlerDMA2_CH1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>BSP_IntHandlerDMA2_CH2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>BSP_IntHandlerDMA2_CH3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>BSP_IntHandlerDMA2_CH4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>BSP_IntHandlerDMA2_CH5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>BSP_IntHandlerDMA2_CH6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH6))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH6 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>BSP_IntHandlerDMA2_CH7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH7 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>BSP_IntHandlerETH</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerETH))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerETH &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>BSP_IntHandlerETHWakeup</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerETHWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerETHWakeup &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BSP_IntHandlerEXTI0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI0 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BSP_IntHandlerEXTI1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>BSP_IntHandlerEXTI15_10</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI15_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI15_10 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BSP_IntHandlerEXTI2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BSP_IntHandlerEXTI3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BSP_IntHandlerEXTI4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BSP_IntHandlerEXTI9_5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI9_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI9_5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BSP_IntHandlerFLASH</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerFLASH))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerFLASH &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>BSP_IntHandlerFPU</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerFPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerFPU &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>BSP_IntHandlerFSMC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerFSMC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerFSMC &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>BSP_IntHandlerHASH_RNG</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerHASH_RNG))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerHASH_RNG &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>BSP_IntHandlerI2C1_ER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerI2C1_ER))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C1_ER &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BSP_IntHandlerI2C1_EV</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerI2C1_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C1_EV &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>BSP_IntHandlerI2C2_ER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerI2C2_ER))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C2_ER &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>BSP_IntHandlerI2C2_EV</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerI2C2_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C2_EV &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>BSP_IntHandlerI2C3_ER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerI2C3_ER))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C3_ER &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>BSP_IntHandlerI2C3_EV</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerI2C3_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C3_EV &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>BSP_IntHandlerLTDC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerLTDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerLTDC &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>BSP_IntHandlerLTDC_ER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerLTDC_ER))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerLTDC_ER &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>BSP_IntHandlerOTG_FS</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerOTG_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG_FS &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BSP_IntHandlerOTG_FS_WKUP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerOTG_FS_WKUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG_FS_WKUP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>BSP_IntHandlerOTG_HS</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerOTG_HS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG_HS &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>BSP_IntHandlerOTG_HS_EP1_IN</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerOTG_HS_EP1_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG_HS_EP1_IN &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>BSP_IntHandlerOTG_HS_EP1_OUT</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerOTG_HS_EP1_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG_HS_EP1_OUT &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>BSP_IntHandlerOTG_HS_WKUP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerOTG_HS_WKUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG_HS_WKUP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BSP_IntHandlerPVD</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerPVD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerPVD &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BSP_IntHandlerRCC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerRCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerRCC &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>BSP_IntHandlerRTCAlarm</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerRTCAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerRTCAlarm &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BSP_IntHandlerRTC_WKUP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerRTC_WKUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerRTC_WKUP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>BSP_IntHandlerSAI1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSAI1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSAI1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>BSP_IntHandlerSDIO</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSDIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSDIO &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>BSP_IntHandlerSPI1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSPI1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>BSP_IntHandlerSPI2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSPI2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>BSP_IntHandlerSPI3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSPI3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>BSP_IntHandlerSPI4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSPI4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>BSP_IntHandlerSPI5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSPI5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>BSP_IntHandlerSPI6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSPI6))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI6 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BSP_IntHandlerTAMP_STAMP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTAMP_STAMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTAMP_STAMP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BSP_IntHandlerTIM1_BRK_TIM9</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM1_BRK_TIM9))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM1_BRK_TIM9 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BSP_IntHandlerTIM1_CC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM1_CC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM1_CC &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BSP_IntHandlerTIM1_TRG_COM_TIM11</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM1_TRG_COM_TIM11))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM1_TRG_COM_TIM11 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BSP_IntHandlerTIM1_UP_TIM10</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM1_UP_TIM10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM1_UP_TIM10 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BSP_IntHandlerTIM2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BSP_IntHandlerTIM3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>BSP_IntHandlerTIM4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>BSP_IntHandlerTIM5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>BSP_IntHandlerTIM6_DAC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM6_DAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM6_DAC &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>BSP_IntHandlerTIM7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM7 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>BSP_IntHandlerTIM8_BRK_TIM12</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM8_BRK_TIM12))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM8_BRK_TIM12 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>BSP_IntHandlerTIM8_CC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM8_CC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM8_CC &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>BSP_IntHandlerTIM8_TRG_COM_TIM14</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM8_TRG_COM_TIM14))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM8_TRG_COM_TIM14 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>BSP_IntHandlerTIM8_UP_TIM13</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM8_UP_TIM13))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM8_UP_TIM13 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>BSP_IntHandlerUART7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUART7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUART7 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>BSP_IntHandlerUART8</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUART8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUART8 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>BSP_IntHandlerUSART1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>BSP_IntHandlerUSART2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSART2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>BSP_IntHandlerUSART3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>BSP_IntHandlerUSART4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSART4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>BSP_IntHandlerUSART5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSART5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>BSP_IntHandlerUSART6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSART6))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART6 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BSP_IntHandlerWWDG</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerWWDG))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerWWDG &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>BSP_IntInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BSP_IntInit &rArr; BSP_IntVectSet
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[f1]"></a>BSP_IntPrioSet</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_int.o(i.BSP_IntPrioSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntPrioSet &rArr; CPU_IntSrcPrioSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPrioSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
</UL>

<P><STRONG><a name="[df]"></a>BSP_IntVectSet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_int.o(i.BSP_IntVectSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BSP_IntVectSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C3_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
</UL>

<P><STRONG><a name="[c4]"></a>BSP_LED_Off</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp.o(i.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTask
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[f4]"></a>BSP_LED_On</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp.o(i.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTask
</UL>

<P><STRONG><a name="[f5]"></a>BSP_LED_Toggle</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bsp.o(i.BSP_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTask
</UL>

<P><STRONG><a name="[de]"></a>BSP_OS_MutexCreate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_os.o(i.BSP_OS_MutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BSP_OS_MutexCreate &rArr; OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C3_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[f8]"></a>BSP_OS_MutexPost</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_os.o(i.BSP_OS_MutexPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = BSP_OS_MutexPost &rArr; OSMutexPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleWrite
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleRead
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_BrustRead
</UL>

<P><STRONG><a name="[fa]"></a>BSP_OS_MutexWait</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bsp_os.o(i.BSP_OS_MutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = BSP_OS_MutexWait &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleWrite
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleRead
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_BrustRead
</UL>

<P><STRONG><a name="[ae]"></a>BSP_OS_SemCreate</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bsp_os.o(i.BSP_OS_SemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_OS_SemCreate &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C3_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppObjCreate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
</UL>

<P><STRONG><a name="[d6]"></a>BSP_OS_SemPost</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_os.o(i.BSP_OS_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI0_ISR_Handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_ISR
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_ISR_Handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrStr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_ISR_Handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_TXTC_UserCallback
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_RXTC_UserCallback
</UL>

<P><STRONG><a name="[fe]"></a>BSP_OS_SemWait</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bsp_os.o(i.BSP_OS_SemWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = BSP_OS_SemWait &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTask
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_GetWidth
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTask
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Read
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrStr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByteUnlocked
</UL>

<P><STRONG><a name="[a3]"></a>BSP_OS_TimeDlyMs</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, bsp_os.o(i.BSP_OS_TimeDlyMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = BSP_OS_TimeDlyMs &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCCalibrateTask
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigateTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTask
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
</UL>

<P><STRONG><a name="[101]"></a>BSP_PWM2_GPIOConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_pwm2.o(i.BSP_PWM2_GPIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_PWM2_GPIOConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriphEn
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_Init
</UL>

<P><STRONG><a name="[bf]"></a>BSP_PWM2_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_pwm2.o(i.BSP_PWM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = BSP_PWM2_Init &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_ModeConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_GPIOConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[103]"></a>BSP_PWM2_ModeConfig</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, bsp_pwm2.o(i.BSP_PWM2_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_PWM2_ModeConfig &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_Init
</UL>

<P><STRONG><a name="[109]"></a>BSP_PWM2_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_pwm2.o(i.BSP_PWM2_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PWM2_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTask
</UL>

<P><STRONG><a name="[10b]"></a>BSP_PWM_GPIOConfig</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_pwm.o(i.BSP_PWM_GPIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_PWM_GPIOConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriphEn
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Init
</UL>

<P><STRONG><a name="[10c]"></a>BSP_PWM_IN_GetWidth</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, bsp_pwm_in.o(i.BSP_PWM_IN_GetWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = BSP_PWM_IN_GetWidth &rArr; BSP_OS_SemWait &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTask
</UL>

<P><STRONG><a name="[c0]"></a>BSP_PWM_IN_InitTimer</STRONG> (Thumb, 524 bytes, Stack size 40 bytes, bsp_pwm_in.o(i.BSP_PWM_IN_InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BSP_PWM_IN_InitTimer &rArr; BSP_OS_SemCreate &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntPrioSet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[be]"></a>BSP_PWM_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_pwm.o(i.BSP_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = BSP_PWM_Init &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_GPIOConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[113]"></a>BSP_PWM_ModeConfig</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bsp_pwm.o(i.BSP_PWM_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_PWM_ModeConfig &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Init
</UL>

<P><STRONG><a name="[11a]"></a>BSP_PWM_Set</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bsp_pwm.o(i.BSP_PWM_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_PWM_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_MaxThrust
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPWM
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_MinThrust
</UL>

<P><STRONG><a name="[e7]"></a>BSP_PeriphEn</STRONG> (Thumb, 428 bytes, Stack size 0 bytes, bsp_periph.o(i.BSP_PeriphEn))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_GPIOConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_GPIOConfig
</UL>

<P><STRONG><a name="[e5]"></a>BSP_SPI1_Init</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, bsp_spi1.o(i.BSP_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = BSP_SPI1_Init &rArr; BSP_OS_SemCreate &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriphEn
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexCreate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[122]"></a>BSP_SPI1_SendReceiveByte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bsp_spi1.o(i.BSP_SPI1_SendReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TxTimeoutCallback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_RxTimeoutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleWrite
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleRead
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_BrustRead
</UL>

<P><STRONG><a name="[c1]"></a>BSP_Ser_Init</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, bsp_ser.o(i.BSP_Ser_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = BSP_Ser_Init &rArr; BSP_OS_TimeDlyMs &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriphEn
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntPrioSet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[a4]"></a>BSP_Ser_Printf</STRONG> (Thumb, 38 bytes, Stack size 160 bytes, bsp_ser.o(i.BSP_Ser_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrStr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTask
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInfo
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTaskCreate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTaskCreate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTaskCreate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTaskCreate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigateTaskCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCCalibrateTaskCreate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTaskCreate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTaskCreate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTaskCreate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTaskCreate
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppObjCreate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTask
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TxTimeoutCallback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_RxTimeoutCallback
</UL>

<P><STRONG><a name="[131]"></a>BSP_Ser_WrStr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_ser.o(i.BSP_Ser_WrStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByteUnlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>

<P><STRONG><a name="[bc]"></a>BSP_Tick_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp.o(i.BSP_Tick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_Tick_Init &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[78]"></a>BSP_USART2_ISR</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, bsp_usart2.o(i.BSP_USART2_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BSP_USART2_ISR &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart2.o(i.BSP_USART2_Init)
</UL>
<P><STRONG><a name="[c2]"></a>BSP_USART2_Init</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, bsp_usart2.o(i.BSP_USART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = BSP_USART2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriphEn
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntPrioSet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[ba]"></a>CORDIC_Init</STRONG> (Thumb, 442 bytes, Stack size 72 bytes, cordic.o(i.CORDIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CORDIC_Init &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[137]"></a>CPAL_HAL_NVICInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpal_hal.o(i.CPAL_HAL_NVICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPAL_HAL_NVICInit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_ITInit
</UL>

<P><STRONG><a name="[139]"></a>CPAL_I2C_ERR_UserCallback</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, cpal_usercallback.o(i.CPAL_I2C_ERR_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CPAL_I2C_ERR_UserCallback &rArr; CPAL_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_StructInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_ER_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>CPAL_I2C_ER_IRQHandler</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, cpal_i2c.o(i.CPAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = CPAL_I2C_ER_IRQHandler &rArr; CPAL_I2C_TXTC_UserCallback &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Timeout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_TXTC_UserCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_ERR_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_ER_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>CPAL_I2C_EV_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cpal_i2c.o(i.CPAL_I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = CPAL_I2C_EV_IRQHandler &rArr; I2C_MASTER_TXE_Handle &rArr; CPAL_I2C_TXTC_UserCallback &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTER_TXE_Handle
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTER_START_Handle
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTER_RXNE_Handle
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTER_ADDR_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_EV_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>CPAL_I2C_Enable_DMA_IT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cpal_i2c.o(i.CPAL_I2C_Enable_DMA_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPAL_I2C_Enable_DMA_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTER_ADDR_Handle
</UL>

<P><STRONG><a name="[142]"></a>CPAL_I2C_HAL_CLKDeInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cpal_i2c_hal_stm32f4xx.o(i.CPAL_I2C_HAL_CLKDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPAL_I2C_HAL_CLKDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Init
</UL>

<P><STRONG><a name="[144]"></a>CPAL_I2C_HAL_CLKInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cpal_i2c_hal_stm32f4xx.o(i.CPAL_I2C_HAL_CLKInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPAL_I2C_HAL_CLKInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Init
</UL>

<P><STRONG><a name="[145]"></a>CPAL_I2C_HAL_GPIODeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cpal_i2c_hal_stm32f4xx.o(i.CPAL_I2C_HAL_GPIODeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CPAL_I2C_HAL_GPIODeInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Init
</UL>

<P><STRONG><a name="[146]"></a>CPAL_I2C_HAL_GPIOInit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, cpal_i2c_hal_stm32f4xx.o(i.CPAL_I2C_HAL_GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CPAL_I2C_HAL_GPIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Init
</UL>

<P><STRONG><a name="[147]"></a>CPAL_I2C_HAL_ITInit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cpal_i2c_hal_stm32f4xx.o(i.CPAL_I2C_HAL_ITInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CPAL_I2C_HAL_ITInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_HAL_NVICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Init
</UL>

<P><STRONG><a name="[e2]"></a>CPAL_I2C_Init</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, cpal_i2c.o(i.CPAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CPAL_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_ITInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_GPIOInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_GPIODeInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_CLKInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_CLKDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C3_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_TIMEOUT_UserCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_ERR_UserCallback
</UL>

<P><STRONG><a name="[e3]"></a>CPAL_I2C_IsDeviceReady</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, cpal_i2c.o(i.CPAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CPAL_I2C_IsDeviceReady &rArr; CPAL_I2C_Timeout &rArr; CPAL_TIMEOUT_UserCallback &rArr; CPAL_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C3_Init
</UL>

<P><STRONG><a name="[14a]"></a>CPAL_I2C_RXTC_UserCallback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cpal_usercallback.o(i.CPAL_I2C_RXTC_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = CPAL_I2C_RXTC_UserCallback &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTER_RXNE_Handle
</UL>

<P><STRONG><a name="[e1]"></a>CPAL_I2C_StructInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, cpal_i2c.o(i.CPAL_I2C_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C3_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_TIMEOUT_UserCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_ERR_UserCallback
</UL>

<P><STRONG><a name="[c7]"></a>CPAL_I2C_TIMEOUT_Manager</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, cpal_i2c.o(i.CPAL_I2C_TIMEOUT_Manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CPAL_I2C_TIMEOUT_Manager &rArr; CPAL_TIMEOUT_UserCallback &rArr; CPAL_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OS_TimeTickHook
</UL>

<P><STRONG><a name="[13c]"></a>CPAL_I2C_TXTC_UserCallback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cpal_usercallback.o(i.CPAL_I2C_TXTC_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = CPAL_I2C_TXTC_UserCallback &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_ER_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTER_TXE_Handle
</UL>

<P><STRONG><a name="[14b]"></a>CPAL_TIMEOUT_UserCallback</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, cpal_usercallback.o(i.CPAL_TIMEOUT_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CPAL_TIMEOUT_UserCallback &rArr; CPAL_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_StructInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_TIMEOUT_Manager
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Timeout
</UL>

<P><STRONG><a name="[14c]"></a>CPU_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = CPU_Init &rArr; CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>CPU_IntSrcDis</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, cpu_c.o(i.CPU_IntSrcDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CPU_IntSrcDis
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDis
</UL>

<P><STRONG><a name="[ed]"></a>CPU_IntSrcEn</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, cpu_c.o(i.CPU_IntSrcEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CPU_IntSrcEn
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>

<P><STRONG><a name="[f2]"></a>CPU_IntSrcPrioSet</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, cpu_c.o(i.CPU_IntSrcPrioSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CPU_IntSrcPrioSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntPrioSet
</UL>

<P><STRONG><a name="[14f]"></a>CPU_NameClr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_NameClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>

<P><STRONG><a name="[170]"></a>CPU_SW_Exception</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_SW_Exception))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Init
</UL>

<P><STRONG><a name="[ca]"></a>CPU_TS_Get32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_TS_Get32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_TS_Get32
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTask
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_dt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTask
</UL>

<P><STRONG><a name="[153]"></a>CPU_TS_TmrFreqSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_TS_TmrFreqSet))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[152]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(i.CPU_TS_TmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrFreqSet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
</UL>

<P><STRONG><a name="[151]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>

<P><STRONG><a name="[154]"></a>CTRL_GetTargetRate</STRONG> (Thumb, 376 bytes, Stack size 96 bytes, control.o(i.CTRL_GetTargetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CTRL_GetTargetRate &rArr; arm_sin_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_f
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarpToPI
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[158]"></a>CTRL_RateController</STRONG> (Thumb, 788 bytes, Stack size 104 bytes, control.o(i.CTRL_RateController))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CTRL_RateController &rArr; DLPF
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPF
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_f
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[159]"></a>CTRL_SetThrottle</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, control.o(i.CTRL_SetThrottle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CTRL_SetThrottle
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_f
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[79]"></a>CommTask</STRONG> (Thumb, 1088 bytes, Stack size 168 bytes, commtask.o(i.CommTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = CommTask &rArr; BSP_OS_SemWait &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EulerRoateVect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPF
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_dt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commtask.o(i.CommTaskCreate)
</UL>
<P><STRONG><a name="[b6]"></a>CommTaskCreate</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, commtask.o(i.CommTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = CommTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[d5]"></a>Constraint_f</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, algorithm.o(i.Constraint_f))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPWM
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_SetThrottle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_RateController
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_GetTargetRate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPF
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigateTask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTask
</UL>

<P><STRONG><a name="[173]"></a>Constraint_int</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, algorithm.o(i.Constraint_int))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Constraint
</UL>

<P><STRONG><a name="[7a]"></a>ControlTask</STRONG> (Thumb, 438 bytes, Stack size 112 bytes, controltask.o(i.ControlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ControlTask &rArr; Motor_SetPWM &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPWM
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_MinThrust
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_SetThrottle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_RateController
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_GetTargetRate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectCopy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_f
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_dt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(i.ControlTaskCreate)
</UL>
<P><STRONG><a name="[b3]"></a>ControlTaskCreate</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, controltask.o(i.ControlTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ControlTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[d4]"></a>DLPF</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, algorithm.o(i.DLPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DLPF
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_f
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_RateController
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTask
</UL>

<P><STRONG><a name="[7b]"></a>ESCCalibrateTask</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, esccalibratetask.o(i.ESCCalibrateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ESCCalibrateTask &rArr; BSP_OS_TimeDlyMs &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_MaxThrust
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_MinThrust
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esccalibratetask.o(i.ESCCalibrateTaskCreate)
</UL>
<P><STRONG><a name="[b0]"></a>ESCCalibrateTaskCreate</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, esccalibratetask.o(i.ESCCalibrateTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ESCCalibrateTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[db]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI0_ISR_Handler
</UL>

<P><STRONG><a name="[d9]"></a>EXTI_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI0_ISR_Handler
</UL>

<P><STRONG><a name="[168]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
</UL>

<P><STRONG><a name="[cd]"></a>EulerRoateVect</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, algorithm.o(i.EulerRoateVect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EulerRoateVect &rArr; arm_sin_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectCopy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTask
</UL>

<P><STRONG><a name="[e8]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_GPIOConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_GPIOConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_GPIOInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_GPIODeInit
</UL>

<P><STRONG><a name="[102]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_GPIOConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_GPIOConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_GPIOInit
</UL>

<P><STRONG><a name="[1e3]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_ISR_Handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_ISR_Handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_ISR_Handler
</UL>

<P><STRONG><a name="[f6]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadOutputData))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[e9]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleWrite
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleRead
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_BrustRead
</UL>

<P><STRONG><a name="[f3]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleWrite
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleRead
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_BrustRead
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
</UL>

<P><STRONG><a name="[cb]"></a>Get_dt</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, globalvariable.o(i.Get_dt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Get_dt &rArr; __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTask
</UL>

<P><STRONG><a name="[dc]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpal_i2c_hal_stm32f4xx.o(i.I2C3_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = I2C3_ER_IRQHandler &rArr; CPAL_I2C_ER_IRQHandler &rArr; CPAL_I2C_TXTC_UserCallback &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_ER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C3_ER_ISR
</UL>

<P><STRONG><a name="[dd]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cpal_i2c_hal_stm32f4xx.o(i.I2C3_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = I2C3_EV_IRQHandler &rArr; CPAL_I2C_EV_IRQHandler &rArr; I2C_MASTER_TXE_Handle &rArr; CPAL_I2C_TXTC_UserCallback &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C3_EV_ISR
</UL>

<P><STRONG><a name="[149]"></a>I2C_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32f4xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Init
</UL>

<P><STRONG><a name="[163]"></a>MPU6000_BrustRead</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mpu6000.o(i.MPU6000_BrustRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = MPU6000_BrustRead &rArr; BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendReceiveByte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexWait
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Read
</UL>

<P><STRONG><a name="[164]"></a>MPU6000_Check</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mpu6000.o(i.MPU6000_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = MPU6000_Check &rArr; MPU6000_SingleRead &rArr; BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
</UL>

<P><STRONG><a name="[166]"></a>MPU6000_Init</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, mpu6000.o(i.MPU6000_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = MPU6000_Init &rArr; MPU6000_Check &rArr; MPU6000_SingleRead &rArr; BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriphEn
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_SingleWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Check
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntPrioSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
</UL>

<P><STRONG><a name="[16a]"></a>MPU6000_Read</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mpu6000.o(i.MPU6000_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = MPU6000_Read &rArr; MPU6000_BrustRead &rArr; BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_BrustRead
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_GetGyroAccRaw
</UL>

<P><STRONG><a name="[165]"></a>MPU6000_SingleRead</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mpu6000.o(i.MPU6000_SingleRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = MPU6000_SingleRead &rArr; BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendReceiveByte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexWait
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Check
</UL>

<P><STRONG><a name="[169]"></a>MPU6000_SingleWrite</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mpu6000.o(i.MPU6000_SingleWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = MPU6000_SingleWrite &rArr; BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendReceiveByte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexWait
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
</UL>

<P><STRONG><a name="[16b]"></a>Math_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lib_math.o(i.Math_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Math_Init &rArr; Math_RandSetSeed
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_RandSetSeed
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>Math_RandSetSeed</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lib_math.o(i.Math_RandSetSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Math_RandSetSeed
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Init
</UL>

<P><STRONG><a name="[150]"></a>Mem_Clr</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lib_mem.o(i.Mem_Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>

<P><STRONG><a name="[16e]"></a>Mem_Init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lib_mem.o(i.Mem_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = Mem_Init &rArr; Mem_SegCreate &rArr; Mem_SegCreateCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SW_Exception
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>Mem_SegCreate</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lib_mem.o(i.Mem_SegCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = Mem_SegCreate &rArr; Mem_SegCreateCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCreateCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Init
</UL>

<P><STRONG><a name="[16d]"></a>Mem_Set</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lib_mem.o(i.Mem_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>

<P><STRONG><a name="[172]"></a>Motor_Constraint</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, motor.o(i.Motor_Constraint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_Constraint
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_int
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPWM
</UL>

<P><STRONG><a name="[160]"></a>Motor_MaxThrust</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, motor.o(i.Motor_MaxThrust))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_MaxThrust &rArr; BSP_PWM_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCCalibrateTask
</UL>

<P><STRONG><a name="[15e]"></a>Motor_MinThrust</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, motor.o(i.Motor_MinThrust))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_MinThrust &rArr; BSP_PWM_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCCalibrateTask
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[15d]"></a>Motor_SetPWM</STRONG> (Thumb, 540 bytes, Stack size 80 bytes, motor.o(i.Motor_SetPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Motor_SetPWM &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_f
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Constraint
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[148]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_ITInit
</UL>

<P><STRONG><a name="[138]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_HAL_NVICInit
</UL>

<P><STRONG><a name="[7d]"></a>NavigateTask</STRONG> (Thumb, 812 bytes, Stack size 32 bytes, navigatetask.o(i.NavigateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = NavigateTask &rArr; BSP_OS_TimeDlyMs &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_f
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navigatetask.o(i.NavigateTaskCreate)
</UL>
<P><STRONG><a name="[b8]"></a>NavigateTaskCreate</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, navigatetask.o(i.NavigateTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = NavigateTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[185]"></a>OSCfg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cfg_app.o(i.OSCfg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1bc]"></a>OSIdleTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSIdleTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIdleTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[174]"></a>OSInit</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_IntQTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTaskInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dbg_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>OSInitHook</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ef]"></a>OSIntEnter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>

<P><STRONG><a name="[f0]"></a>OSIntExit</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[f7]"></a>OSMutexCreate</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, os_mutex.o(i.OSMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDbgListAdd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexCreate
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
</UL>

<P><STRONG><a name="[fb]"></a>OSMutexPend</STRONG> (Thumb, 522 bytes, Stack size 64 bytes, os_mutex.o(i.OSMutexPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexWait
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
</UL>

<P><STRONG><a name="[f9]"></a>OSMutexPost</STRONG> (Thumb, 610 bytes, Stack size 40 bytes, os_mutex.o(i.OSMutexPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpRemove
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_MutexPost
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
</UL>

<P><STRONG><a name="[18d]"></a>OSSched</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, os_core.o(i.OSSched))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>

<P><STRONG><a name="[196]"></a>OSSchedLock</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedLock &rArr; OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[198]"></a>OSSchedUnlock</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStop
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[fc]"></a>OSSemCreate</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemDbgListAdd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
</UL>

<P><STRONG><a name="[ff]"></a>OSSemPend</STRONG> (Thumb, 462 bytes, Stack size 64 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
</UL>

<P><STRONG><a name="[fd]"></a>OSSemPost</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
</UL>

<P><STRONG><a name="[19d]"></a>OSStart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>OSStatReset</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, os_stat.o(i.OSStatReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStatReset
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrResetPeak
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListResetPeak
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[bd]"></a>OSStatTaskCPUUsageInit</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, os_stat.o(i.OSStatTaskCPUUsageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSStatTaskCPUUsageInit &rArr; OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1cf]"></a>OSStatTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSStatTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSStatTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[ac]"></a>OSTaskCreate</STRONG> (Thumb, 566 bytes, Stack size 80 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTaskCreate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTaskCreate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTaskCreate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTaskCreate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigateTaskCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCCalibrateTaskCreate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTaskCreate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTaskCreate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTaskCreate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTaskCreate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTaskInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
</UL>

<P><STRONG><a name="[1a8]"></a>OSTaskCreateHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[161]"></a>OSTaskDel</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCCalibrateTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1ae]"></a>OSTaskDelHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1a4]"></a>OSTaskResume</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, os_task.o(i.OSTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[1d1]"></a>OSTaskReturnHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1b1]"></a>OSTaskSemPend</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, os_task.o(i.OSTaskSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[1b2]"></a>OSTaskStkChk</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[1a6]"></a>OSTaskStkInit</STRONG> (Thumb, 600 bytes, Stack size 20 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1a2]"></a>OSTaskSuspend</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[a2]"></a>OSTaskSwHook</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_FP_Reg_Pop
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_FP_Reg_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_PendSVHandler
</UL>

<P><STRONG><a name="[1a3]"></a>OSTimeDly</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[100]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
</UL>

<P><STRONG><a name="[1b7]"></a>OSTimeTick</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_time.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[1b8]"></a>OSTimeTickHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[9]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_cpu_c.o(i.OS_CPU_SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tick_Init
</UL>

<P><STRONG><a name="[184]"></a>OS_Dbg_Init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, os_dbg.o(i.OS_Dbg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[178]"></a>OS_FlagInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b9]"></a>OS_FlagPost</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, os_flag.o(i.OS_FlagPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OS_FlagPost &rArr; OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[1ba]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_flag.o(i.OS_FlagTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
</UL>

<P><STRONG><a name="[7f]"></a>OS_IdleTask</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_core.o(i.OS_IdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_IdleTask &rArr; OSIdleTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIdleTaskHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_IdleTaskInit)
</UL>
<P><STRONG><a name="[180]"></a>OS_IdleTaskInit</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, os_core.o(i.OS_IdleTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19b]"></a>OS_IntQPost</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, os_int.o(i.OS_IntQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[1bd]"></a>OS_IntQRePost</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, os_int.o(i.OS_IntQRePost))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IntQRePost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
</UL>

<P><STRONG><a name="[80]"></a>OS_IntQTask</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, os_int.o(i.OS_IntQTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IntQTask &rArr; OS_IntQRePost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_int.o(i.OS_IntQTaskInit)
</UL>
<P><STRONG><a name="[17f]"></a>OS_IntQTaskInit</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, os_int.o(i.OS_IntQTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OS_IntQTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[179]"></a>OS_MemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17a]"></a>OS_MsgPoolInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_msg.o(i.OS_MsgPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MsgPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ad]"></a>OS_MsgQFreeAll</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_msg.o(i.OS_MsgQFreeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MsgQFreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1a7]"></a>OS_MsgQInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_msg.o(i.OS_MsgQInit))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
</UL>

<P><STRONG><a name="[1cc]"></a>OS_MsgQPut</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, os_msg.o(i.OS_MsgQPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_MsgQPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
</UL>

<P><STRONG><a name="[189]"></a>OS_MutexDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[18a]"></a>OS_MutexGrpAdd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexGrpAdd))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
</UL>

<P><STRONG><a name="[1ac]"></a>OS_MutexGrpPostAll</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, os_mutex.o(i.OS_MutexGrpPostAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpRemove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[190]"></a>OS_MutexGrpPrioFindHighest</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, os_mutex.o(i.OS_MutexGrpPrioFindHighest))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_MutexGrpPrioFindHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
</UL>

<P><STRONG><a name="[18f]"></a>OS_MutexGrpRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexGrpRemove))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
</UL>

<P><STRONG><a name="[17b]"></a>OS_MutexInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[18c]"></a>OS_Pend</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_core.o(i.OS_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameAdd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>

<P><STRONG><a name="[1c4]"></a>OS_PendDataInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OS_PendDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1c6]"></a>OS_PendDbgNameAdd</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, os_core.o(i.OS_PendDbgNameAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1ca]"></a>OS_PendDbgNameRemove</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, os_core.o(i.OS_PendDbgNameRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[1c7]"></a>OS_PendListChangePrio</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, os_core.o(i.OS_PendListChangePrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
</UL>

<P><STRONG><a name="[188]"></a>OS_PendListInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_core.o(i.OS_PendListInit))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[1c5]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, os_core.o(i.OS_PendListInsertPrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1ab]"></a>OS_PendListRemove</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, os_core.o(i.OS_PendListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
</UL>

<P><STRONG><a name="[1c8]"></a>OS_PendListRemove1</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_core.o(i.OS_PendListRemove1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
</UL>

<P><STRONG><a name="[194]"></a>OS_Post</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, os_core.o(i.OS_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
</UL>

<P><STRONG><a name="[1c9]"></a>OS_Post1</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, os_core.o(i.OS_Post1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_Post1
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[186]"></a>OS_PrioGetHighest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_prio.o(i.OS_PrioGetHighest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[176]"></a>OS_PrioInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[192]"></a>OS_PrioInsert</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[1c2]"></a>OS_PrioRemove</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>

<P><STRONG><a name="[17c]"></a>OS_QInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1be]"></a>OS_QPost</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, os_q.o(i.OS_QPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[177]"></a>OS_RdyListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(i.OS_RdyListInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1bb]"></a>OS_RdyListInsert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
</UL>

<P><STRONG><a name="[1cd]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[193]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[1ce]"></a>OS_RdyListMoveHeadToTail</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListMoveHeadToTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
</UL>

<P><STRONG><a name="[191]"></a>OS_RdyListRemove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_core.o(i.OS_RdyListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
</UL>

<P><STRONG><a name="[18e]"></a>OS_Sched0</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched0
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
</UL>

<P><STRONG><a name="[197]"></a>OS_SchedLockTimeMeasStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_core.o(i.OS_SchedLockTimeMeasStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[199]"></a>OS_SchedLockTimeMeasStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.OS_SchedLockTimeMeasStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[1c1]"></a>OS_SchedRoundRobin</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, os_core.o(i.OS_SchedRoundRobin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_SchedRoundRobin &rArr; OS_RdyListMoveHeadToTail
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[19a]"></a>OS_SemDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[17d]"></a>OS_SemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19c]"></a>OS_SemPost</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, os_sem.o(i.OS_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[81]"></a>OS_StatTask</STRONG> (Thumb, 788 bytes, Stack size 24 bytes, os_stat.o(i.OS_StatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OS_StatTask &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskHook
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_stat.o(i.OS_StatTaskInit)
</UL>
<P><STRONG><a name="[182]"></a>OS_StatTaskInit</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, os_stat.o(i.OS_StatTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_StatTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c3]"></a>OS_TaskBlock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[18b]"></a>OS_TaskChangePrio</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, os_task.o(i.OS_TaskChangePrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
</UL>

<P><STRONG><a name="[1a9]"></a>OS_TaskDbgListAdd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1af]"></a>OS_TaskDbgListRemove</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskDbgListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[17e]"></a>OS_TaskInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1a5]"></a>OS_TaskInitTCB</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskInitTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1bf]"></a>OS_TaskQPost</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, os_task.o(i.OS_TaskQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OS_TaskQPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[1b0]"></a>OS_TaskResume</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TaskResume &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[7e]"></a>OS_TaskReturn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[1c0]"></a>OS_TaskSemPost</STRONG> (Thumb, 1210 bytes, Stack size 32 bytes, os_task.o(i.OS_TaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[1b3]"></a>OS_TaskSuspend</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[1d0]"></a>OS_TickListInsert</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, os_tick.o(i.OS_TickListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>

<P><STRONG><a name="[1b6]"></a>OS_TickListInsertDly</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_tick.o(i.OS_TickListInsertDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[1aa]"></a>OS_TickListRemove</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, os_tick.o(i.OS_TickListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[1a0]"></a>OS_TickListResetPeak</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_tick.o(i.OS_TickListResetPeak))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[82]"></a>OS_TickTask</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, os_tick.o(i.OS_TickTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = OS_TickTask &rArr; OS_TickListUpdateTimeout &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tick.o(i.OS_TickTaskInit)
</UL>
<P><STRONG><a name="[181]"></a>OS_TickTaskInit</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, os_tick.o(i.OS_TickTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[183]"></a>OS_TmrInit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, os_tmr.o(i.OS_TmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1a1]"></a>OS_TmrResetPeak</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_tmr.o(i.OS_TmrResetPeak))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[83]"></a>OS_TmrTask</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, os_tmr.o(i.OS_TmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = OS_TmrTask &rArr; OS_TmrLock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OS_TmrInit)
</UL>
<P><STRONG><a name="[1d5]"></a>OS_TmrUnlink</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_tmr.o(i.OS_TmrUnlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_TmrUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[84]"></a>PosControlTask</STRONG> (Thumb, 1312 bytes, Stack size 184 bytes, poscontroltask.o(i.PosControlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = PosControlTask &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectCopy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLPF
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_f
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_dt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> poscontroltask.o(i.PosControlTaskCreate)
</UL>
<P><STRONG><a name="[b4]"></a>PosControlTaskCreate</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, poscontroltask.o(i.PosControlTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = PosControlTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[85]"></a>PrintfTask</STRONG> (Thumb, 152 bytes, Stack size 88 bytes, serprinttask.o(i.PrintfTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = PrintfTask &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serprinttask.o(i.PrintfTaskCreate)
</UL>
<P><STRONG><a name="[b7]"></a>PrintfTaskCreate</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, serprinttask.o(i.PrintfTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = PrintfTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[110]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_GPIOInit
</UL>

<P><STRONG><a name="[10e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_CLKInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_CLKDeInit
</UL>

<P><STRONG><a name="[143]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_CLKInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_HAL_CLKDeInit
</UL>

<P><STRONG><a name="[10d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
</UL>

<P><STRONG><a name="[1da]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[d8]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInfo
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[86]"></a>RCTask</STRONG> (Thumb, 852 bytes, Stack size 136 bytes, rctask.o(i.RCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = RCTask &rArr; BSP_PWM_IN_GetWidth &rArr; BSP_OS_SemWait &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_GetTarget
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constraint_f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_GetWidth
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_dt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rctask.o(i.RCTaskCreate)
</UL>
<P><STRONG><a name="[b2]"></a>RCTaskCreate</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, rctask.o(i.RCTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = RCTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[126]"></a>SPI1_RxTimeoutCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_spi1.o(i.SPI1_RxTimeoutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = SPI1_RxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendReceiveByte
</UL>

<P><STRONG><a name="[123]"></a>SPI1_TxTimeoutCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_spi1.o(i.SPI1_TxTimeoutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendReceiveByte
</UL>

<P><STRONG><a name="[120]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_CalculateCRC))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[121]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[11e]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[124]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendReceiveByte
</UL>

<P><STRONG><a name="[127]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendReceiveByte
</UL>

<P><STRONG><a name="[125]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendReceiveByte
</UL>

<P><STRONG><a name="[11f]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[167]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
</UL>

<P><STRONG><a name="[c9]"></a>SensorUpdate_GetGyroAccRaw</STRONG> (Thumb, 540 bytes, Stack size 80 bytes, sensor_update.o(i.SensorUpdate_GetGyroAccRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = SensorUpdate_GetGyroAccRaw &rArr; MPU6000_Read &rArr; MPU6000_BrustRead &rArr; BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
</UL>

<P><STRONG><a name="[c8]"></a>SensorUpdate_Init</STRONG> (Thumb, 820 bytes, Stack size 120 bytes, sensor_update.o(i.SensorUpdate_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = SensorUpdate_Init &rArr; SensorUpdate_GetGyroAccRaw &rArr; MPU6000_Read &rArr; MPU6000_BrustRead &rArr; BSP_SPI1_SendReceiveByte &rArr; SPI1_TxTimeoutCallback &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectScale
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectAdd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_GetGyroAccRaw
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_UpdateAlignRotMat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_SetAccOffset
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_SetAccGain
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6000_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_SetMagOffset
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_SetGyroOffset
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
</UL>

<P><STRONG><a name="[a6]"></a>SensorUpdate_SetAccGain</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sensor_update.o(i.SensorUpdate_SetAccGain))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTask
</UL>

<P><STRONG><a name="[a7]"></a>SensorUpdate_SetAccOffset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sensor_update.o(i.SensorUpdate_SetAccOffset))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTask
</UL>

<P><STRONG><a name="[1db]"></a>SensorUpdate_SetGyroOffset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sensor_update.o(i.SensorUpdate_SetGyroOffset))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
</UL>

<P><STRONG><a name="[1dc]"></a>SensorUpdate_SetMagOffset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sensor_update.o(i.SensorUpdate_SetMagOffset))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
</UL>

<P><STRONG><a name="[a5]"></a>SensorUpdate_UpdateAlignRotMat</STRONG> (Thumb, 1354 bytes, Stack size 96 bytes, sensor_update.o(i.SensorUpdate_UpdateAlignRotMat))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SensorUpdate_UpdateAlignRotMat &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTask
</UL>

<P><STRONG><a name="[87]"></a>StateCheckTask</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, statechecktask.o(i.StateCheckTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = StateCheckTask &rArr; DisplaySystemInfo &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_Set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInfo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_dt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statechecktask.o(i.StateCheckTaskCreate)
</UL>
<P><STRONG><a name="[b1]"></a>StateCheckTaskCreate</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, statechecktask.o(i.StateCheckTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = StateCheckTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>TIM1_ISR_Handler</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, bsp_pwm_in.o(i.TIM1_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM1_ISR_Handler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_pwm_in.o(i.BSP_PWM_IN_InitTimer)
</UL>
<P><STRONG><a name="[75]"></a>TIM2_ISR_Handler</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, bsp_pwm_in.o(i.TIM2_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = TIM2_ISR_Handler &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_pwm_in.o(i.BSP_PWM_IN_InitTimer)
</UL>
<P><STRONG><a name="[76]"></a>TIM8_ISR_Handler</STRONG> (Thumb, 570 bytes, Stack size 16 bytes, bsp_pwm_in.o(i.TIM8_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM8_ISR_Handler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_pwm_in.o(i.BSP_PWM_IN_InitTimer)
</UL>
<P><STRONG><a name="[107]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_ModeConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[1e1]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_ISR_Handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_ISR_Handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_ISR_Handler
</UL>

<P><STRONG><a name="[108]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_ModeConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[1e4]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture1))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_ISR_Handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_ISR_Handler
</UL>

<P><STRONG><a name="[1e5]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_ISR_Handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_ISR_Handler
</UL>

<P><STRONG><a name="[1e2]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture3))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_ISR_Handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_ISR_Handler
</UL>

<P><STRONG><a name="[1e0]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_ISR_Handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_ISR_Handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_ISR_Handler
</UL>

<P><STRONG><a name="[111]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
</UL>

<P><STRONG><a name="[112]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
</UL>

<P><STRONG><a name="[114]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[115]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[116]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[117]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[118]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[119]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[105]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_ModeConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[106]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_ModeConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[11b]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Set
</UL>

<P><STRONG><a name="[11c]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Set
</UL>

<P><STRONG><a name="[11d]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Set
</UL>

<P><STRONG><a name="[10a]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_Set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Set
</UL>

<P><STRONG><a name="[1e7]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1e9]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1eb]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1ed]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[104]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_ModeConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_ModeConfig
</UL>

<P><STRONG><a name="[10f]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
</UL>

<P><STRONG><a name="[12f]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
</UL>

<P><STRONG><a name="[12a]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_ISR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_ISR_Handler
</UL>

<P><STRONG><a name="[12d]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
</UL>

<P><STRONG><a name="[12e]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
</UL>

<P><STRONG><a name="[128]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_ISR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_ISR_Handler
</UL>

<P><STRONG><a name="[12b]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTask
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_ISR
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByteUnlocked
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_ISR_Handler
</UL>

<P><STRONG><a name="[12c]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
</UL>

<P><STRONG><a name="[129]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_ISR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_ISR_Handler
</UL>

<P><STRONG><a name="[133]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByteUnlocked
</UL>

<P><STRONG><a name="[d3]"></a>VectAdd</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, algorithm.o(i.VectAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VectAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
</UL>

<P><STRONG><a name="[cc]"></a>VectCopy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, algorithm.o(i.VectCopy))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectAdd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EulerRoateVect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTask
</UL>

<P><STRONG><a name="[d2]"></a>VectScale</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, algorithm.o(i.VectScale))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
</UL>

<P><STRONG><a name="[155]"></a>WarpToPI</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, algorithm.o(i.WarpToPI))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_GetTargetRate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_GetTarget
</UL>

<P><STRONG><a name="[1ee]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21a]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[21b]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[130]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>

<P><STRONG><a name="[21c]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1f7]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1f1]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[1d7]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTask
</UL>

<P><STRONG><a name="[135]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
</UL>

<P><STRONG><a name="[cf]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
</UL>

<P><STRONG><a name="[1dd]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_UpdateAlignRotMat
</UL>

<P><STRONG><a name="[d1]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
</UL>

<P><STRONG><a name="[a9]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_GetTarget
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTask
</UL>

<P><STRONG><a name="[1de]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorUpdate_UpdateAlignRotMat
</UL>

<P><STRONG><a name="[d0]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
</UL>

<P><STRONG><a name="[136]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPWM
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
</UL>

<P><STRONG><a name="[ce]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTask
</UL>

<P><STRONG><a name="[1fd]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1ff]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1fa]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1fe]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1f6]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1fc]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1f8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1f3]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[1fb]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[1f5]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[1f2]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[200]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[21d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[21e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[21f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1f4]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[157]"></a>arm_cos_f32</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, arm_cos_f32.o(i.arm_cos_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_GetTargetRate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EulerRoateVect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTask
</UL>

<P><STRONG><a name="[156]"></a>arm_sin_f32</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, arm_sin_f32.o(i.arm_sin_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTRL_GetTargetRate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EulerRoateVect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTask
</UL>

<P><STRONG><a name="[15b]"></a>checksum</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, algorithm.o(i.checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTask
</UL>

<P><STRONG><a name="[1f9]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_IntQTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDisAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1d8]"></a>rc_GetTarget</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, rc.o(i.rc_GetTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rc_GetTarget &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WarpToPI
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTask
</UL>

<P><STRONG><a name="[1f0]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ad]"></a>AppObjCreate</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app.o(i.AppObjCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = AppObjCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[af]"></a>AppTaskCreate</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app.o(i.AppTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = AppTaskCreate &rArr; StateCheckTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTaskCreate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCTaskCreate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTaskCreate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosControlTaskCreate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigateTaskCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCCalibrateTaskCreate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTaskCreate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTaskCreate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeTaskCreate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrateTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[89]"></a>AppTaskStart</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app.o(i.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; AppTaskCreate &rArr; StateCheckTaskCreate &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tick_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_IN_InitTimer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM2_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C3_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppObjCreate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OS_SetAllHooks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[15f]"></a>DisplaySystemInfo</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, statechecktask.o(i.DisplaySystemInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DisplaySystemInfo &rArr; BSP_Ser_Printf &rArr; BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCheckTask
</UL>

<P><STRONG><a name="[e6]"></a>BSP_LED_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriphEn
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[ee]"></a>BSP_IntHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_int.o(i.BSP_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerWWDG
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART6
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART5
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART4
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART3
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART2
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART1
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUART8
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUART7
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM8_UP_TIM13
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM8_TRG_COM_TIM14
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM8_CC
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM8_BRK_TIM12
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM7
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM6_DAC
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM5
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM4
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM3
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM2
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM1_UP_TIM10
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM1_TRG_COM_TIM11
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM1_CC
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM1_BRK_TIM9
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTAMP_STAMP
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI6
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI5
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI4
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI3
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI2
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI1
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSDIO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSAI1
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerRTC_WKUP
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerRTCAlarm
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerRCC
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerPVD
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG_HS_WKUP
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG_HS_EP1_OUT
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG_HS_EP1_IN
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG_HS
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG_FS_WKUP
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG_FS
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerLTDC_ER
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerLTDC
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C3_EV
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C3_ER
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C2_EV
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C2_ER
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C1_EV
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C1_ER
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerHASH_RNG
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerFSMC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerFPU
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerFLASH
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI9_5
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI4
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI3
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI2
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI15_10
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI1
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI0
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerETHWakeup
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerETH
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH7
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH6
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH5
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH4
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH3
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH2
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH0
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2D
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_STREAM7
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH6
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH5
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH4
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH3
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH2
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH1
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH0
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDCMI
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCRYP
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN2_TX
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN2_SCE
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN2_RX1
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN2_RX0
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN1_TX
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN1_SCE
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN1_RX1
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN1_RX0
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerADC
</UL>

<P><STRONG><a name="[73]"></a>BSP_IntHandlerDummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_int.o(i.BSP_IntHandlerDummy))
<BR>[Address Reference Count : 1]<UL><LI> bsp_int.o(i.BSP_IntInit)
</UL>
<P><STRONG><a name="[77]"></a>BSP_Ser_ISR_Handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bsp_ser.o(i.BSP_Ser_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = BSP_Ser_ISR_Handler &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_ser.o(i.BSP_Ser_Init)
</UL>
<P><STRONG><a name="[132]"></a>BSP_Ser_WrByteUnlocked</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_ser.o(i.BSP_Ser_WrByteUnlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = BSP_Ser_WrByteUnlocked &rArr; BSP_OS_SemWait &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrStr
</UL>

<P><STRONG><a name="[14e]"></a>CPU_NameInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_NameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = CPU_NameInit &rArr; CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[14d]"></a>CPU_TS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[171]"></a>Mem_SegCreateCritical</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib_mem.o(i.Mem_SegCreateCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Mem_SegCreateCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCreate
</UL>

<P><STRONG><a name="[1d2]"></a>OS_TickListUpdateDly</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, os_tick.o(i.OS_TickListUpdateDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdateDly &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[1d3]"></a>OS_TickListUpdateTimeout</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, os_tick.o(i.OS_TickListUpdateTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdateTimeout &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[1d4]"></a>OS_TmrLock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_tmr.o(i.OS_TmrLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = OS_TmrLock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[1d6]"></a>OS_TmrUnlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_tmr.o(i.OS_TmrUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OS_TmrUnlock &rArr; OSMutexPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[1e6]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1e8]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1ea]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1ec]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1df]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[13b]"></a>CPAL_I2C_Timeout</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cpal_i2c.o(i.CPAL_I2C_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CPAL_I2C_Timeout &rArr; CPAL_TIMEOUT_UserCallback &rArr; CPAL_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_IsDeviceReady
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_ER_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTER_TXE_Handle
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTER_RXNE_Handle
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MASTER_ADDR_Handle
</UL>

<P><STRONG><a name="[13f]"></a>I2C_MASTER_ADDR_Handle</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, cpal_i2c.o(i.I2C_MASTER_ADDR_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C_MASTER_ADDR_Handle &rArr; CPAL_I2C_Timeout &rArr; CPAL_TIMEOUT_UserCallback &rArr; CPAL_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Enable_DMA_IT
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>I2C_MASTER_RXNE_Handle</STRONG> (Thumb, 804 bytes, Stack size 8 bytes, cpal_i2c.o(i.I2C_MASTER_RXNE_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = I2C_MASTER_RXNE_Handle &rArr; CPAL_I2C_RXTC_UserCallback &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Timeout
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_RXTC_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>I2C_MASTER_START_Handle</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cpal_i2c.o(i.I2C_MASTER_START_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>I2C_MASTER_TXE_Handle</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, cpal_i2c.o(i.I2C_MASTER_TXE_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = I2C_MASTER_TXE_Handle &rArr; CPAL_I2C_TXTC_UserCallback &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_Timeout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_TXTC_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[201]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ef]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[203]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[202]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[88]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
